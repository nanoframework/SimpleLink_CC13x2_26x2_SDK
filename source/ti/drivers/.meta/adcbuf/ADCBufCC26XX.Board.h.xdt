%%{
/*
 * Copyright (c) 2018-2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ADCBufCC26XX.Board.h.xdt ========
 */

    let ADCBuf = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */
    let instances = ADCBuf.$instances;
    if (instances.length == 0) {
        return;
    }

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /*
     * Since we will potentially push channels to instances, we must create
     * a copy of the array of instances.
     */
    let localInstance = [];

    /*
     * Only one ADCBuf instance exist due to one ADC peripheral on CC26XX
     * Add all channels to the array of instance objects.
     */
    for (let i = 0; i < instances[0].channels; i++) {
        if (instances[0]["adcBufChannel" + i]) {
            localInstance.push(instances[0]["adcBufChannel" + i]);
        }
    }
    if (instances[0].adcBufChannelBattery) {
        localInstance.push(instances[0].adcBufChannelBattery);
    }
    if (instances[0].adcBufChannelDecoupling) {
        localInstance.push(instances[0].adcBufChannelDecoupling);
    }
    if (instances[0].adcBufChannelGround) {
        localInstance.push(instances[0].adcBufChannelGround);
    }

    let defs = Common.genBoardHeader(instances, ADCBuf);
    let chanDefs = Common.genBoardHeader(localInstance, ADCBuf, false);
%%}
`defs`

/*
 * ======== ADCBuf Channels ========
 */

`chanDefs`