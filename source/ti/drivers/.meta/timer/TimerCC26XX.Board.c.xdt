%%{
/*
 * Copyright (c) 2018-2020, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== TimerCC26XX.Board.c.xdt ========
 */

    let Timer  = args[0];
    let instances = [];

    for (let i = 0; i < Timer.$instances.length; i++) {
        let inst = Timer.$instances[i];
        /* generate if useGPTimer is not selected */
        if (inst.useGPTimer == false) {
            instances.push(inst);
        }
    }
    if (instances.length == 0) {
        return;
    }
    let sideMap   = {};

    /* get Common /ti/drivers utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = Timer.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== Timer ===============================
 */

#include <ti/drivers/Timer.h>
#include <ti/drivers/timer/TimerCC26XX.h>

#define `countDef` `instances.length`

/*
 *  ======== timerCC26XXObjects ========
 */
TimerCC26XX_Object timerCC26XXObjects[`countDef`];

/*
 *  ======== timerCC26XXHWAttrs ========
 */
const TimerCC26XX_HWAttrs timerCC26XXHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let timer = inst.timerInstance.timer;
    % let timerType = inst.timerType == "16 Bits" ? 16: 32;
    % let timerName = timer.$solution.peripheralName; /* GPTM0 */
    % let timerNum  = timerName.substring(4); /* 0-7 */
    % let timerAB   = (timerNum in sideMap ? 'B' : 'A');
    % sideMap[timerNum] = '1';
    {
        .gpTimerUnit = `inst.timerInstance.$name`,
        .subTimer    = TimerCC26XX_timer`timerType``timerType==16?timerAB:''`

    },
% }
};

/*
 *  ======== Timer_config ========
 */
const Timer_Config Timer_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .object    = &timerCC26XXObjects[`inst.$name`],
        .hwAttrs   = &timerCC26XXHWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t Timer_count = `countDef`;
