%%{
/*
 * Copyright (c) 2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ti_easylink_config.c.xdt ========
 */
// Get common utility functions
const Common = system.getScript("/ti/easylink/easylink_common.js");

// Get the EasyLink module
const easylink = system.modules["/ti/easylink/easylink"].$static;

/*
 *  ======== createPhyList ========
 *  Creates a list of enabled phys along with each phy's command names and
 *  source code generated by the radio config module.
 *
 *  @returns Array - Of objects. Each object is in the form returned from
 *  calling getEmptyPhyObject()
 */
function createPhyList()
{
    const phyList = []; // Array returned holding info on all enabled phys

    let easylinkPhys = Common.getDropDownOptions(easylink, "defaultPhy");

    // Create a list of phys that are currently enabled/selected
    const enabledPhys = [];
    for(let opt of easylinkPhys)
    {
        if(easylink[opt])
        {
            enabledPhys.push(opt);
        }
    }

    // Iterate over all enabled phys, get info for each from radio config module
    for(let i = 0; i < enabledPhys.length; i++)
    {
        // Get the radio config instance associated with the current phy
        const inst = easylink["radioConfig" +
            Common.underscoreToCamelCase(enabledPhys[i])];

        // Get the code export configuration for this instance
        const ceConfig = inst.codeExportConfig;

        const cmdList = ceConfig.cmdList_prop;
        const otherCmds = ["rfMode", "txPower", "txPowerSize"];

        // Create an empty phy object to hold info found in radio config module
        const phyObject = getEmptyPhyObject();
        phyObject.phyType.identifier = enabledPhys[i];

        // Get the phy type being used
        let phy = null;
        if(inst.freqBand === "868")
        {
            phy = inst.phyType868;
        }
        else if(inst.freqBand === "433")
        {
            phy = inst.phyType433;
        }
        else // 2400
        {
            phy = inst.phyType2400;
        }

        for(let j = 0; j < cmdList.length; j++)
        {
            const cmdKey = cmdList[j];

            // Check if the command exists
            if (cmdKey in phyObject && !(cmdKey === "cmdPropTx" && phy.includes("154g"))
                && !(cmdKey === "cmdPropTxAdv" && !phy.includes("154g")))
            {
                // Set the identifier for the give command
                phyObject[cmdKey].identifier = ceConfig[cmdKey];
            }
        }

        for(let j = 0; j < otherCmds.length; j++)
        {
            const cmdKey = otherCmds[j];

            // Check if the command exists
            if (cmdKey in phyObject)
            {
                // Set the identifier for the give command
                phyObject[cmdKey].identifier = ceConfig[cmdKey];
            }
        }

        // Add the phy and all it's collected information to the list
        phyList.push(phyObject);
    }

    return(phyList)
}

/*
 *  ======== getEmptyPhyObject ========
 *  Creates a phy object with properties for ALL possible elements in the
 *  EasyLink_RfSetting struct defined in EasyLink.h
 *
 *  Note: Not all properties of the returned object apply to every phy. For
 *        example, the cmdPropTxAdv property is only used for the 200kbps phy.
 *
 *  @returns Object - an object with properties for ALL possible elements in the
 *  EasyLink_RfSetting struct defined in EasyLink.h. Each property is an object
 *  of the form:
 *      {
 *          structElement: <string>, // Stores the C identifier for this struct element
 *          pointer: <boolean>, // True if the element is a pointer, false otherwise
 *          identifier: <string>, // The C identifier for the value of the struct element
 *          source: <string>  // The source code for this element generated by the radio config module
 *      }
 */
function getEmptyPhyObject()
{
    return({
        phyType:
            {
                structElement: ".EasyLink_phyType",
                pointer: false,
                identifier: null,
                source: null
            },
        rfMode:
            {
                structElement: ".RF_pProp",
                pointer: true,
                identifier: null,
                source: null
            },
        cmdPropRadioSetup:
            {
                structElement: ".RF_uCmdPropRadio.RF_pCmdPropRadioSetup",
                pointer: true,
                identifier: null,
                source: null
            },
        cmdPropRadioDivSetup:
            {
                structElement: ".RF_uCmdPropRadio.RF_pCmdPropRadioDivSetup",
                pointer: true,
                identifier: null,
                source: null
            },
        cmdPropRadioDivSetupPa:
            {
                structElement: ".RF_uCmdPropRadio.RF_pCmdPropRadioDivSetup",
                pointer: true,
                identifier: null,
                source: null
            },
        cmdFs:
            {
                structElement: ".RF_pCmdFs",
                pointer: true,
                identifier: null,
                source: null
            },
        cmdPropTx:
            {
                structElement: ".RF_pCmdPropTx",
                pointer: true,
                identifier: null,
                source: null
            },
        cmdPropTxAdv:
            {
                structElement: ".RF_pCmdPropTxAdv",
                pointer: true,
                identifier: null,
                source: null
            },
        cmdPropRxAdv:
            {
                structElement: ".RF_pCmdPropRxAdv",
                pointer: true,
                identifier: null,
                source: null
            },
        txPower:
            {
                structElement: ".RF_pTxPowerTable",
                pointer: false,
                identifier: null,
                source: null
            },
        txPowerSize:
            {
                structElement: ".RF_txPowerTableSize",
                pointer: false,
                identifier: null,
                source: null
            }
    });
}
%%}

/*
 *  ======== ti_easylink_config.c ========
 *  Configured EasyLink module definitions
 *
 *  DO NOT EDIT - This file is generated for the `Common.getDeviceOrLaunchPadName(false)`
 *  by the SysConfig tool.
 */

/***** Includes *****/
#include "easylink/EasyLink.h"
#include <stdint.h>

/* TI Drivers */
#include <ti/drivers/rf/RF.h>

/* Radio Config */
#include <ti_radio_config.h>

EasyLink_RfSetting EasyLink_supportedPhys[] = {
%%{
if(!easylink.configInSrfStudio)
{
    const phyList = createPhyList();
    for(let i = 0; i < phyList.length; i++)
    {
%%}
    {
%%{
        for(let key in phyList[i])
        {
            if(phyList[i][key].identifier !== null)
            {
                if(phyList[i][key].pointer)
                {
%%}
        `phyList[i][key].structElement` = &`phyList[i][key].identifier`,
%%{
                }
                else
                {
%%}
        `phyList[i][key].structElement` = `phyList[i][key].identifier`,
%%{
                }
            }
            else if(key === "cmdPropTx" || key === "cmdPropTxAdv")
            {
%%}
        `phyList[i][key].structElement` = NULL,
%%{
            }
        }
%%}
    },
%%{
    }
}
else
{
%%}
    {
        .EasyLink_phyType = EasyLink_Phy_Custom,
        .RF_pProp = &RF_prop,
        .RF_uCmdPropRadio.RF_pCmdPropRadioDivSetup = &RF_cmdPropRadioDivSetup,
        .RF_pCmdFs = &RF_cmdFs,
        .RF_pCmdPropTx = &RF_cmdPropTx,
        .RF_pCmdPropRxAdv = &RF_cmdPropRxAdv,
        .RF_pTxPowerTable = txPowerTable,
        .RF_txPowerTableSize = TX_POWER_TABLE_SIZE
    }
%}
};

const uint8_t EasyLink_numSupportedPhys = sizeof(EasyLink_supportedPhys)/sizeof(EasyLink_RfSetting);
